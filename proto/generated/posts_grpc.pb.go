// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostProtobufServiceClient is the client API for PostProtobufService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostProtobufServiceClient interface {
	// /Posts
	ListPost(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*PostResponse, error)
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*PostResponse, error)
}

type postProtobufServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostProtobufServiceClient(cc grpc.ClientConnInterface) PostProtobufServiceClient {
	return &postProtobufServiceClient{cc}
}

func (c *postProtobufServiceClient) ListPost(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.PostProtobufService/ListPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postProtobufServiceClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.PostProtobufService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postProtobufServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.PostProtobufService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postProtobufServiceClient) UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.PostProtobufService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postProtobufServiceClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.PostProtobufService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostProtobufServiceServer is the server API for PostProtobufService service.
// All implementations should embed UnimplementedPostProtobufServiceServer
// for forward compatibility
type PostProtobufServiceServer interface {
	// /Posts
	ListPost(context.Context, *ListPostsRequest) (*PostResponse, error)
	CreatePost(context.Context, *Post) (*PostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*PostResponse, error)
	UpdatePost(context.Context, *Post) (*PostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*PostResponse, error)
}

// UnimplementedPostProtobufServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPostProtobufServiceServer struct {
}

func (UnimplementedPostProtobufServiceServer) ListPost(context.Context, *ListPostsRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPost not implemented")
}
func (UnimplementedPostProtobufServiceServer) CreatePost(context.Context, *Post) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostProtobufServiceServer) GetPost(context.Context, *GetPostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostProtobufServiceServer) UpdatePost(context.Context, *Post) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostProtobufServiceServer) DeletePost(context.Context, *DeletePostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}

// UnsafePostProtobufServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostProtobufServiceServer will
// result in compilation errors.
type UnsafePostProtobufServiceServer interface {
	mustEmbedUnimplementedPostProtobufServiceServer()
}

func RegisterPostProtobufServiceServer(s grpc.ServiceRegistrar, srv PostProtobufServiceServer) {
	s.RegisterService(&PostProtobufService_ServiceDesc, srv)
}

func _PostProtobufService_ListPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostProtobufServiceServer).ListPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.PostProtobufService/ListPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostProtobufServiceServer).ListPost(ctx, req.(*ListPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostProtobufService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostProtobufServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.PostProtobufService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostProtobufServiceServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostProtobufService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostProtobufServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.PostProtobufService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostProtobufServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostProtobufService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostProtobufServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.PostProtobufService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostProtobufServiceServer).UpdatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostProtobufService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostProtobufServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.PostProtobufService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostProtobufServiceServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostProtobufService_ServiceDesc is the grpc.ServiceDesc for PostProtobufService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostProtobufService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worklen.proto.PostProtobufService",
	HandlerType: (*PostProtobufServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPost",
			Handler:    _PostProtobufService_ListPost_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostProtobufService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostProtobufService_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostProtobufService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostProtobufService_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "posts.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttachmentProtobufServiceClient is the client API for AttachmentProtobufService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentProtobufServiceClient interface {
	// /Attachments
	ListAttachment(ctx context.Context, in *AttachmentRequest, opts ...grpc.CallOption) (*AttachmentResponse, error)
	CreateAttachment(ctx context.Context, in *Attachment, opts ...grpc.CallOption) (*AttachmentResponse, error)
	GetAttachment(ctx context.Context, in *AttachmentRequest, opts ...grpc.CallOption) (*AttachmentResponse, error)
	UpdateAttachment(ctx context.Context, in *Attachment, opts ...grpc.CallOption) (*AttachmentResponse, error)
	DeleteAttachment(ctx context.Context, in *AttachmentRequest, opts ...grpc.CallOption) (*AttachmentResponse, error)
}

type attachmentProtobufServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentProtobufServiceClient(cc grpc.ClientConnInterface) AttachmentProtobufServiceClient {
	return &attachmentProtobufServiceClient{cc}
}

func (c *attachmentProtobufServiceClient) ListAttachment(ctx context.Context, in *AttachmentRequest, opts ...grpc.CallOption) (*AttachmentResponse, error) {
	out := new(AttachmentResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.AttachmentProtobufService/ListAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentProtobufServiceClient) CreateAttachment(ctx context.Context, in *Attachment, opts ...grpc.CallOption) (*AttachmentResponse, error) {
	out := new(AttachmentResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.AttachmentProtobufService/CreateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentProtobufServiceClient) GetAttachment(ctx context.Context, in *AttachmentRequest, opts ...grpc.CallOption) (*AttachmentResponse, error) {
	out := new(AttachmentResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.AttachmentProtobufService/GetAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentProtobufServiceClient) UpdateAttachment(ctx context.Context, in *Attachment, opts ...grpc.CallOption) (*AttachmentResponse, error) {
	out := new(AttachmentResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.AttachmentProtobufService/UpdateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentProtobufServiceClient) DeleteAttachment(ctx context.Context, in *AttachmentRequest, opts ...grpc.CallOption) (*AttachmentResponse, error) {
	out := new(AttachmentResponse)
	err := c.cc.Invoke(ctx, "/worklen.proto.AttachmentProtobufService/DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentProtobufServiceServer is the server API for AttachmentProtobufService service.
// All implementations should embed UnimplementedAttachmentProtobufServiceServer
// for forward compatibility
type AttachmentProtobufServiceServer interface {
	// /Attachments
	ListAttachment(context.Context, *AttachmentRequest) (*AttachmentResponse, error)
	CreateAttachment(context.Context, *Attachment) (*AttachmentResponse, error)
	GetAttachment(context.Context, *AttachmentRequest) (*AttachmentResponse, error)
	UpdateAttachment(context.Context, *Attachment) (*AttachmentResponse, error)
	DeleteAttachment(context.Context, *AttachmentRequest) (*AttachmentResponse, error)
}

// UnimplementedAttachmentProtobufServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAttachmentProtobufServiceServer struct {
}

func (UnimplementedAttachmentProtobufServiceServer) ListAttachment(context.Context, *AttachmentRequest) (*AttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachment not implemented")
}
func (UnimplementedAttachmentProtobufServiceServer) CreateAttachment(context.Context, *Attachment) (*AttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttachment not implemented")
}
func (UnimplementedAttachmentProtobufServiceServer) GetAttachment(context.Context, *AttachmentRequest) (*AttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachment not implemented")
}
func (UnimplementedAttachmentProtobufServiceServer) UpdateAttachment(context.Context, *Attachment) (*AttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttachment not implemented")
}
func (UnimplementedAttachmentProtobufServiceServer) DeleteAttachment(context.Context, *AttachmentRequest) (*AttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}

// UnsafeAttachmentProtobufServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentProtobufServiceServer will
// result in compilation errors.
type UnsafeAttachmentProtobufServiceServer interface {
	mustEmbedUnimplementedAttachmentProtobufServiceServer()
}

func RegisterAttachmentProtobufServiceServer(s grpc.ServiceRegistrar, srv AttachmentProtobufServiceServer) {
	s.RegisterService(&AttachmentProtobufService_ServiceDesc, srv)
}

func _AttachmentProtobufService_ListAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentProtobufServiceServer).ListAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.AttachmentProtobufService/ListAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentProtobufServiceServer).ListAttachment(ctx, req.(*AttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentProtobufService_CreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attachment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentProtobufServiceServer).CreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.AttachmentProtobufService/CreateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentProtobufServiceServer).CreateAttachment(ctx, req.(*Attachment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentProtobufService_GetAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentProtobufServiceServer).GetAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.AttachmentProtobufService/GetAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentProtobufServiceServer).GetAttachment(ctx, req.(*AttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentProtobufService_UpdateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attachment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentProtobufServiceServer).UpdateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.AttachmentProtobufService/UpdateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentProtobufServiceServer).UpdateAttachment(ctx, req.(*Attachment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentProtobufService_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentProtobufServiceServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worklen.proto.AttachmentProtobufService/DeleteAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentProtobufServiceServer).DeleteAttachment(ctx, req.(*AttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttachmentProtobufService_ServiceDesc is the grpc.ServiceDesc for AttachmentProtobufService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachmentProtobufService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worklen.proto.AttachmentProtobufService",
	HandlerType: (*AttachmentProtobufServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAttachment",
			Handler:    _AttachmentProtobufService_ListAttachment_Handler,
		},
		{
			MethodName: "CreateAttachment",
			Handler:    _AttachmentProtobufService_CreateAttachment_Handler,
		},
		{
			MethodName: "GetAttachment",
			Handler:    _AttachmentProtobufService_GetAttachment_Handler,
		},
		{
			MethodName: "UpdateAttachment",
			Handler:    _AttachmentProtobufService_UpdateAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _AttachmentProtobufService_DeleteAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attachments.proto",
}
